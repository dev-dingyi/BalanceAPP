import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Alert,
  CircularProgress,
  FormControlLabel,
  Checkbox,
  Chip,
  OutlinedInput,
  InputAdornment,
} from '@mui/material';
import { useSettingsStore } from '../../stores/settingsStore';
import { useCategories } from '../../hooks/useCategories';
import { useBudgets } from '../../hooks/useBudgets';
import { formatDateForInput, parseDateInput } from '../../utils/date';
import { getCurrencySymbol } from '../../utils/currency';
import type { Budget, BudgetInput, BudgetType, Currency } from '../../types';

interface Props {
  open: boolean;
  onClose: () => void;
  budget?: Budget | null;
}

export const BudgetDialog = ({ open, onClose, budget }: Props) => {
  const { t } = useTranslation();
  const { preferredCurrency } = useSettingsStore();
  const { categories } = useCategories();
  const { addBudget, updateBudget } = useBudgets();

  const [formData, setFormData] = useState<BudgetInput>({
    name: '',
    nameEn: '',
    nameCn: '',
    type: 'monthly',
    amount: 0,
    currency: preferredCurrency as Currency,
    categories: [],
    startDate: new Date(),
    endDate: new Date(),
    recurring: {
      enabled: false,
      dayOfMonth: 1,
      cycleLength: 30,
    },
  });

  const [error, setError] = useState('');
  const [submitting, setSubmitting] = useState(false);

  // Initialize form when budget prop changes
  useEffect(() => {
    if (budget) {
      setFormData({
        name: budget.name,
        nameEn: budget.nameEn,
        nameCn: budget.nameCn,
        type: budget.type,
        amount: budget.amount,
        currency: budget.currency,
        categories: budget.categories,
        startDate: new Date(budget.startDate),
        endDate: new Date(budget.endDate),
        recurring: budget.recurring || {
          enabled: false,
          dayOfMonth: 1,
          cycleLength: 30,
        },
      });
    } else {
      // Reset for new budget
      const now = new Date();
      const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      setFormData({
        name: '',
        nameEn: '',
        nameCn: '',
        type: 'monthly',
        amount: 0,
        currency: preferredCurrency as Currency,
        categories: [],
        startDate: now,
        endDate: endOfMonth,
        recurring: {
          enabled: false,
          dayOfMonth: 1,
          cycleLength: 30,
        },
      });
    }
    setError('');
  }, [budget, open, preferredCurrency]);

  const handleTypeChange = (type: BudgetType) => {
    const now = new Date();
    let endDate = new Date();

    if (type === 'monthly') {
      // End of current month
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    } else if (type === 'recurring') {
      // Default 30-day cycle
      endDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
    }

    setFormData({
      ...formData,
      type,
      startDate: now,
      endDate,
    });
  };

  const handleSubmit = async () => {
    setError('');

    // Validation
    if (!formData.name.trim() || !formData.nameEn.trim() || !formData.nameCn.trim()) {
      setError('All name fields are required');
      return;
    }

    if (formData.amount <= 0) {
      setError('Amount must be greater than zero');
      return;
    }

    if (formData.startDate >= formData.endDate) {
      setError('End date must be after start date');
      return;
    }

    setSubmitting(true);

    try {
      if (budget) {
        await updateBudget(budget.id, formData);
      } else {
        await addBudget(formData);
      }
      onClose();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save budget');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        {budget ? t('budget.edit_budget') : t('budget.add_budget')}
      </DialogTitle>
      <DialogContent>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {/* Name Fields */}
        <TextField
          label={t('budget.budget_name')}
          fullWidth
          required
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          sx={{ mt: 2, mb: 2 }}
        />

        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <TextField
            label="Name (English)"
            fullWidth
            required
            value={formData.nameEn}
            onChange={(e) => setFormData({ ...formData, nameEn: e.target.value })}
          />
          <TextField
            label="Name (Chinese)"
            fullWidth
            required
            value={formData.nameCn}
            onChange={(e) => setFormData({ ...formData, nameCn: e.target.value })}
          />
        </Box>

        {/* Budget Type */}
        <FormControl fullWidth sx={{ mb: 2 }}>
          <InputLabel>{t('budget.budget_type')}</InputLabel>
          <Select
            value={formData.type}
            label={t('budget.budget_type')}
            onChange={(e) => handleTypeChange(e.target.value as BudgetType)}
          >
            <MenuItem value="monthly">{t('budget.monthly')}</MenuItem>
            <MenuItem value="custom">{t('budget.custom')}</MenuItem>
            <MenuItem value="recurring">{t('budget.recurring')}</MenuItem>
          </Select>
        </FormControl>

        {/* Amount and Currency */}
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <TextField
            label={t('budget.amount')}
            type="number"
            required
            fullWidth
            value={formData.amount}
            onChange={(e) => setFormData({ ...formData, amount: parseFloat(e.target.value) || 0 })}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  {getCurrencySymbol(formData.currency)}
                </InputAdornment>
              ),
            }}
            inputProps={{
              step: '0.01',
              min: '0',
            }}
          />
          <FormControl sx={{ minWidth: 120 }}>
            <InputLabel>{t('transaction.currency')}</InputLabel>
            <Select
              value={formData.currency}
              label={t('transaction.currency')}
              onChange={(e) => setFormData({ ...formData, currency: e.target.value as Currency })}
            >
              <MenuItem value="USD">USD ($)</MenuItem>
              <MenuItem value="CNY">CNY (Â¥)</MenuItem>
            </Select>
          </FormControl>
        </Box>

        {/* Date Range */}
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <TextField
            label={t('budget.start_date')}
            type="date"
            required
            fullWidth
            value={formatDateForInput(formData.startDate)}
            onChange={(e) => setFormData({ ...formData, startDate: parseDateInput(e.target.value) })}
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            label={t('budget.end_date')}
            type="date"
            required
            fullWidth
            value={formatDateForInput(formData.endDate)}
            onChange={(e) => setFormData({ ...formData, endDate: new Date(e.target.value) })}
            InputLabelProps={{ shrink: true }}
          />
        </Box>

        {/* Categories */}
        <FormControl fullWidth sx={{ mb: 2 }}>
          <InputLabel>{t('budget.select_categories')}</InputLabel>
          <Select
            multiple
            value={formData.categories}
            onChange={(e) => setFormData({ ...formData, categories: e.target.value as string[] })}
            input={<OutlinedInput label={t('budget.select_categories')} />}
            renderValue={(selected) => (
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                {selected.length === 0 ? (
                  <Chip label="All categories" size="small" />
                ) : (
                  selected.map((value) => {
                    const cat = categories.find(c => c.id === value);
                    return <Chip key={value} label={cat?.name || value} size="small" />;
                  })
                )}
              </Box>
            )}
          >
            <MenuItem value="">
              <em>All categories</em>
            </MenuItem>
            {categories.map((category) => (
              <MenuItem key={category.id} value={category.id}>
                {category.icon} {category.name}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        {/* Recurring Settings */}
        {formData.type === 'recurring' && (
          <Box sx={{ border: '1px solid', borderColor: 'divider', borderRadius: 1, p: 2, mb: 2 }}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={formData.recurring?.enabled || false}
                  onChange={(e) => setFormData({
                    ...formData,
                    recurring: {
                      ...formData.recurring!,
                      enabled: e.target.checked,
                    },
                  })}
                />
              }
              label="Enable recurring budget"
            />

            {formData.recurring?.enabled && (
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                <TextField
                  label={t('budget.day_of_month')}
                  type="number"
                  fullWidth
                  value={formData.recurring.dayOfMonth}
                  onChange={(e) => setFormData({
                    ...formData,
                    recurring: {
                      ...formData.recurring!,
                      dayOfMonth: parseInt(e.target.value) || 1,
                    },
                  })}
                  inputProps={{ min: 1, max: 31 }}
                />
                <TextField
                  label={t('budget.cycle_length')}
                  type="number"
                  fullWidth
                  value={formData.recurring.cycleLength}
                  onChange={(e) => setFormData({
                    ...formData,
                    recurring: {
                      ...formData.recurring!,
                      cycleLength: parseInt(e.target.value) || 30,
                    },
                  })}
                  inputProps={{ min: 1 }}
                />
              </Box>
            )}
          </Box>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} disabled={submitting}>
          {t('common.cancel')}
        </Button>
        <Button
          onClick={handleSubmit}
          variant="contained"
          disabled={submitting}
          startIcon={submitting && <CircularProgress size={20} />}
        >
          {submitting ? t('common.loading') : t('common.save')}
        </Button>
      </DialogActions>
    </Dialog>
  );
};
